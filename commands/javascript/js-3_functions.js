module.exports =[{
	name: "js3-1",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Functions #1 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{title:$customEmoji[en_git] **ENï¸±Arrow Functions (ES6)**}
{description:\`\`\`js
// Arrow function with two arguments
const sum = (firstParam, secondParam) => {
	return firstParam + secondParam#SEMI#
#LEFT_BRACKET##SEMI# 
console.log(sum(2,5))#SEMI# // Prints: 7

// Arrow function with no arguments 
const printHello = () => { 
	console.log('hello')#SEMI#
#LEFT_BRACKET##SEMI#
printHello()#SEMI# // Prints: hello 

// Arrow functions with a single argument
const checkWeight = weight => { 
	console.log(\`Baggage weight #COLON# $\\{weight#LEFT_BRACKET# kilograms.\`)#SEMI#
#LEFT_BRACKET##SEMI#
checkWeight(25)#SEMI# // Prints: Baggage weight: 25 kilograms.

// Concise arrow functions
const multiply = (a, b) => a * b#SEMI#
console.log(multiply(2, 30))#SEMI# // Prints: 60\`\`\`
Arrow function expressions were introduced in ES6. These expressions are clean and concise. The syntax for an arrow function expression does not require the **\`function\`** keyword and uses a fat arrow **\`=>\`** to separate the parameter(s) from the body.

> There are several variations of arrow functions#COLON#
> 
> $customEmoji[circle_git] Arrow functions with a single parameter do not require **\`()\`** around the parameter list.
> 
> $customEmoji[circle_git] Arrow functions with a single expression can use the concise function body which returns the result of the expression without the **\`return\`** keyword.}}

{newEmbed:{footer:JavaScript Fonksiyonlar #1 ğ– µ ï¹«$userTag[285118390031351809] tarafÄ±ndan yapÄ±ldÄ±}

{color:#F0DB4F}
{title: $customEmoji[tr_git] **TRï¸±Ok Ä°ÅŸlevleri (ES6)**}
{description:\`\`\`js
// Ä°ki baÄŸÄ±msÄ±z deÄŸiÅŸkenli ok iÅŸlevi
const toplamÄ± = (ilkParam, ikinciParam) => {
	return ilkParam + ikinciParam#SEMI#
#LEFT_BRACKET##SEMI#
console.log(sum(2,5))#SEMI# // YazÄ±lan: 7

// ArgÃ¼mansÄ±z ok iÅŸlevi
const merhabaYazdir = () => {
	console.log('merhaba')#SEMI#
#LEFT_BRACKET##SEMI#
merhabaYazdir()#SEMI# // BaskÄ±lar: merhaba

// Tek argÃ¼manlÄ± ok fonksiyonlarÄ±
const agirlikKontrolu = agÄ±rlÄ±k => {
	console.log(\`Bagaj aÄŸÄ±rlÄ±ÄŸÄ± #COLON# $\\{aÄŸÄ±rlÄ±k#LEFT_BRACKET# kilogram.\`)#SEMI#
#LEFT_BRACKET##SEMI#
agirlikKontrolu(25)#SEMI# // YazÄ±lan: Bagaj aÄŸÄ±rlÄ±ÄŸÄ±: 25 kilogram.

// KÄ±sa ok fonksiyonlarÄ±
const carpma = (a, b) => a * b#SEMI#
	console.log(carpma(2, 30))#SEMI# // YazÄ±lan: 60\`\`\`
Ok iÅŸlevi ifadeleri ES6'da tanÄ±tÄ±ldÄ±.  Bu ifadeler temiz ve Ã¶zlÃ¼dÃ¼r. Bir ok iÅŸlevi ifadesinin sÃ¶zdizimi **\`function\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼nÃ¼ gerektirmez ve parametreleri gÃ¶vdeden ayÄ±rmak iÃ§in kalÄ±n ok **\`=>\`** kullanÄ±r.

>>> Ok iÅŸlevlerinin Ã§eÅŸitli varyasyonlarÄ± vardÄ±r#COLON#

$customEmoji[circle_git] Tek parametreli ok iÅŸlevleri, parametre listesi Ã§evresinde **\`()\`** gerektirmez.

$customEmoji[circle_git] Tek bir ifadeye sahip ok iÅŸlevleri, **\`return\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼ olmadan ifadenin sonucunu dÃ¶ndÃ¼ren kÄ±sa iÅŸlev gÃ¶vdesini kullanabilir.
}}]`
}, {
	name: "js3-2",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #1 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Functions**:
\`\`\`js
// Defining the function: 
function sum(num1, num2) {
	return num1 + num2#SEMI#
#LEFT_BRACKET#

// Calling the function:
sum(3, 6)#SEMI# // 9\`\`\`
Functions are one of the fundamental building blocks in JavaScript. A \`function\` is a reusable set of statements to perform a task or calculate a value. Functions can be passed one or more values and can return a value at the end of their execution. In order to use a function, you must define it somewhere in the scope where you wish to call it.

The example code provided contains a function that takes in 2 values and returns the sum of those numbers.}

{field:$customEmoji[tr_git] **TRï¸±Fonksiyonlar**:
\`\`\`js
// Fonksiyonu tanÄ±mlama:
function toplami(sayi1, sayi2) {
	return sayi1 + sayi2#SEMI#
#LEFT_BRACKET#

// Fonksiyonu Ã§aÄŸÄ±rma: 
sum(3, 6)#SEMI# // 9\`\`\`
Ä°ÅŸlevler, JavaScript'teki temel yapÄ± taÅŸlarÄ±ndan biridir. Bir \`function\', bir gÃ¶revi gerÃ§ekleÅŸtirmek veya bir deÄŸeri hesaplamak iÃ§in yeniden kullanÄ±labilir bir ifadeler kÃ¼mesidir. Fonksiyonlara bir veya daha fazla deÄŸer iletilebilir ve yÃ¼rÃ¼tmelerinin sonunda bir deÄŸer dÃ¶ndÃ¼rebilir. Bir iÅŸlevi kullanmak iÃ§in, onu kapsam iÃ§inde Ã§aÄŸÄ±rmak istediÄŸiniz bir yerde tanÄ±mlamanÄ±z gerekir.

SaÄŸlanan Ã¶rnek kod, 2 deÄŸer alan ve bu sayÄ±larÄ±n toplamÄ±nÄ± dÃ¶ndÃ¼ren bir iÅŸlev iÃ§erir.}}]
`
}]