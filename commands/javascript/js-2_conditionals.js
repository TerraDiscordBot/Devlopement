module.exports =[{
	name: "js2-1",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #1 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Control Flow**:
>>> Control flow is the order in which statements are executed in a program. The default control flow is for statements to be read and executed in order from left-to-right, top-to-bottom in a program file.
Control structures such as conditionals (**\`if\`** statements and the like) alter control flow by only executing blocks of code if certain conditions are met. These structures essentially allow a program to make decisions about which code is executed as the program runs.}

{field:$customEmoji[tr_git] **TRï¸±Kontrol akÄ±ÅŸÄ±**:
>>> Kontrol akÄ±ÅŸÄ±, bir programda deyimlerin yÃ¼rÃ¼tÃ¼ldÃ¼ÄŸÃ¼ sÄ±radÄ±r. VarsayÄ±lan kontrol akÄ±ÅŸÄ±, bir program dosyasÄ±nda soldan saÄŸa, yukarÄ±dan aÅŸaÄŸÄ±ya sÄ±rayla deyimlerin okunmasÄ± ve yÃ¼rÃ¼tÃ¼lmesi iÃ§indir.
KoÅŸullar (**\`if\`** ifadeleri ve benzerleri) gibi denetim yapÄ±larÄ±, yalnÄ±zca belirli koÅŸullar karÅŸÄ±lanÄ±rsa kod bloklarÄ±nÄ± yÃ¼rÃ¼terek denetim akÄ±ÅŸÄ±nÄ± deÄŸiÅŸtirir. Bu yapÄ±lar esasen bir programÄ±n, program Ã§alÄ±ÅŸÄ±rken hangi kodun yÃ¼rÃ¼tÃ¼leceÄŸi konusunda karar vermesine izin verir.}}]
`
}, {
	name: "js2-2",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #2 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Comparison Operators**:
\`\`\`js
1 > 3             // false
3 > 1             // true
250 >= 250        // true
1 === 1           // true
1 === 2           // false
1 === '1'         // false
1 == 1            // true
1 != 1            // false\`\`\`
Comparison operators are used to comparing two values and return **\`true\`** or **\`false\`** depending on the validity of the comparison#COLON#

$customEmoji[circle_git] \`===\`strict equal
$customEmoji[circle_git] \`!==\` strict not equal
$customEmoji[circle_git] \`==\` equal
$customEmoji[circle_git] \`!=\` not equal
$customEmoji[circle_git] \`>\` greater than
$customEmoji[circle_git] \`>=\` greater than or equal
$customEmoji[circle_git] \`<\` less than
$customEmoji[circle_git] \`<=\` less than or equal}

{field:$customEmoji[tr_git] **TRï¸±KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri**:
\`\`\`js
1 > 3             // yanlÄ±ÅŸ
3 > 1             // doÄŸru
250 >= 250        // doÄŸru
1 === 1           // doÄŸru
1 === 2           // yanlÄ±ÅŸ
1 === '1'         // yanlÄ±ÅŸ
1 == 1            // doÄŸru
1 != 1            // yanlÄ±ÅŸ\`\`\`
KarÅŸÄ±laÅŸtÄ±rma operatÃ¶rleri, iki deÄŸeri karÅŸÄ±laÅŸtÄ±rmak ve karÅŸÄ±laÅŸtÄ±rmanÄ±n geÃ§erliliÄŸine baÄŸlÄ± olarak **\`true\`** veya **\`false\`** dÃ¶ndÃ¼rmek iÃ§in kullanÄ±lÄ±r#COLON#

>>> $customEmoji[circle_git] \`===\`kesinlikle eÅŸit
$customEmoji[circle_git] \`!==\` kesinlikle eÅŸit deÄŸil
$customEmoji[circle_git] \`==\` eÅŸittir
$customEmoji[circle_git] \`!=\` eÅŸit deÄŸil
$customEmoji[circle_git] \`>\` ÅŸundan bÃ¼yÃ¼k
$customEmoji[circle_git] \`>=\` bÃ¼yÃ¼k veya eÅŸit
$customEmoji[circle_git] \`<\` ÅŸundan kÃ¼Ã§Ã¼k
$customEmoji[circle_git] \`<=\` kÃ¼Ã§Ã¼k veya eÅŸit}}]
`
}, {
	name: "js2-3",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #3 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±\`if\` Statement**:
\`\`\`js
const isMailSent = true#SEMI#

if (isMailSent) { 
	console.log('Mail sent to recipient')#SEMI#
#LEFT_BRACKET#\`\`\`
An **\`if\`** statement accepts an expression with a set of parentheses#COLON#
>>> $customEmoji[circle_git] If the expression evaluates to a truthy value, then the code within its code body executes.
$customEmoji[circle_git] If the expression evaluates to a falsy value, its code body will not execute.}

{field:$customEmoji[tr_git] **TRï¸±\`if\` Ä°fadesi**:
\`\`\`js
const postaGonderildimi = true#SEMI#

if (postaGonderildimi) {
	console.log('Posta alÄ±cÄ±ya gÃ¶nderildi')#SEMI#
#LEFT_BRACKET#\`\`\`
Bir **\`if\`** ifadesi, bir dizi parantez iÃ§eren bir ifadeyi kabul eder#COLON#
>>> $customEmoji[circle_git] Ä°fade gerÃ§eÄŸe uygun bir deÄŸer olarak deÄŸerlendirilirse, kod gÃ¶vdesi iÃ§indeki kod yÃ¼rÃ¼tÃ¼lÃ¼r.
$customEmoji[circle_git] Ä°fade sahte bir deÄŸer olarak deÄŸerlendirilirse, kod gÃ¶vdesi yÃ¼rÃ¼tÃ¼lmez.}}]
`
}, {
	name: "js2-4",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #4 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±\`else\` Statement**:
\`\`\`js
const isTaskCompleted = false#SEMI#
if (isTaskCompleted) {
	console.log('Task completed')#SEMI#
#LEFT_BRACKET# else {
	console.log('Task incomplete')#SEMI#
#LEFT_BRACKET#\`\`\`
An **\`else\`** block can be added to an **\`if\`** block or series of **\`if-else if blocks\`**. The else block will be executed only if the **\`if\`** condition fails.}

{field:$customEmoji[tr_git] **TRï¸±\`else\` Ä°fadesi**:
\`\`\`js
const gorevTamamlandimi = false#SEMI#
if (gorevTamamlandimi) {
	console.log('GÃ¶rev tamamlandÄ±')#SEMI#
#LEFT_BRACKET# else {
	console.log('GÃ¶rev tamamlanmadÄ±')#SEMI#
#LEFT_BRACKET#\`\`\`
Bir **\`if\`** bloÄŸuna veya **\`if-else if bloklarÄ± dizisine\`** bir **\`else\`** bloÄŸu eklenebilir.  else bloÄŸu yalnÄ±zca **\`if\`** koÅŸulu baÅŸarÄ±sÄ±z olursa yÃ¼rÃ¼tÃ¼lÃ¼r.}}]
`
}, {
	name: "js2-5",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #5 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±\`else if\` Clause**:
\`\`\`js
const size = 10#SEMI#

if (size > 100) {
	console.log('Big ')#SEMI#
#LEFT_BRACKET# else if (size > 20) { 
	console.log('Medium')#SEMI#
#LEFT_BRACKET# else if (size > 4) { 
	console.log('Small')#SEMI#
#LEFT_BRACKET# else {
	console.log('Tiny')#SEMI#
#LEFT_BRACKET#
// Print: Small\`\`\`
After an initial **\`if\`** block,** \`else if\`** blocks can each check an additional condition. An optional **\`else\`** block can be added after the **\`else if\`** block(s) to run by default if none of the conditionals evaluated to truthy.}

{field:$customEmoji[tr_git] **TRï¸±\`else if\` Maddesi**:
\`\`\`js
const boyut = 10#SEMI#

if (boyut > 100) {
	console.log('BÃ¼yÃ¼k')#SEMI#
#LEFT_BRACKET# else if (boyut > 20) { 
	console.log('Orta')#SEMI#
#LEFT_BRACKET# else if (boyut > 4) { 
	console.log('KÃ¼Ã§Ã¼k')#SEMI#
#LEFT_BRACKET# else {
	console.log('Ã‡ok KÃ¼Ã§Ã¼k')#SEMI#
#LEFT_BRACKET#
// YazÄ±lan: KÃ¼Ã§Ã¼k\`\`\`
Ä°lk **\`if\`** bloÄŸundan sonra,** \`else if\`** bloklarÄ±nÄ±n her biri ek bir koÅŸulu kontrol edebilir.  Ä°steÄŸe baÄŸlÄ± bir **\`else\`** bloÄŸu, **\`else if\`** blok(lar)Ä±ndan sonra varsayÄ±lan olarak Ã§alÄ±ÅŸacak ÅŸekilde eklenebilir.}}]
`
}, {
	name: "js2-6",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #6 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±\`switch\` Statement**:
\`\`\`js
const food = 'salad'#SEMI#

switch (food) { 
	case 'oyster':
		console.log('The taste of the sea')#SEMI#
		break#SEMI#
	case 'pizza':
		console.log('A delicious pie')#SEMI#
		break#SEMI#
	default:
		console.log('Enjoy your meal')#SEMI#
#LEFT_BRACKET#
// Prints: Enjoy your meal\`\`\`
The **\`switch\`** statements provide a means of checking an expression against multiple **\`case\`** clauses. If a case matches, the code inside that clause is executed.

The **\`case\`** clause should finish with a **\`break\`** keyword. If no case matches but a **\`default\`** clause is included, the code inside **\`default\`** will be executed.

Note: If **\`break\`** is omitted from the block of a case, the **\`switch\`** statement will continue to check against **\`case\`** values until a break is encountered or the flow is broken.}

{field:$customEmoji[tr_git] **TRï¸±\`switch\` Ä°fadesi**:
\`\`\`js
const yemek = 'salata'#SEMI#

switch (gÄ±da) {
	case 'istiridye':
		console.log('Denizin tadÄ±')#SEMI#
		break#SEMI#
	case 'pizza':
		console.log('Lezzetli bir parÃ§a')#SEMI#
		break#SEMI#
	default:
		console.log('YemeÄŸinizin tadÄ±nÄ± Ã§Ä±karÄ±n')#SEMI#
#LEFT_BRACKET#
// YazÄ±lan: YemeÄŸinizin tadÄ±nÄ± Ã§Ä±karÄ±n\`\`\`
**\`switch\`** ifadeleri, bir ifadeyi birden Ã§ok **\`case\`** yan tÃ¼mcesine karÅŸÄ± kontrol etmenin bir yolunu saÄŸlar. Bir durum eÅŸleÅŸirse, o yan tÃ¼mcenin iÃ§indeki kod yÃ¼rÃ¼tÃ¼lÃ¼r.

**\`case\`** yan tÃ¼mcesi bir **\`break\`** anahtar kelimesiyle bitmelidir.  HiÃ§bir durum eÅŸleÅŸmezse ancak bir **\`default\`** yan tÃ¼mcesi dahil edilirse, **\`default\`** iÃ§indeki kod yÃ¼rÃ¼tÃ¼lÃ¼r.

**__Not#COLON#__** Bir atlanmÄ±ÅŸ bloÄŸunda **\`break\`** atlanÄ±rsa, **\`switch\`** ifadesi bir ara verilene kadar **\`case\`** deÄŸerleriyle kontrol etmeye devam eder#SEMI# karÅŸÄ±laÅŸÄ±lÄ±r veya akÄ±ÅŸ kesilir.}}]
`
}, {
	name: "js2-7",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #7 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Logical Operator \`||\`**:
\`\`\`js
true || false#SEMI#           // true
10 > 5 || 10 > 20#SEMI#       // true
false || false#SEMI#          // false
10 > 100 || 10 > 20#SEMI#     // false\`\`\`
The logical OR operator \`||\` checks two values and returns a boolean. If one or both values are truthy, it returns **\`true\`**. If both values are falsy, it returns **\`false\`**.}

{field:$customEmoji[tr_git] **TRï¸±MantÄ±ksal OperatÃ¶r \`||\`**:
\`\`\`js
true || false#SEMI#           // doÄŸru
10 > 5 || 10 > 20#SEMI#       // doÄŸru
false || false#SEMI#          // yanlÄ±ÅŸ
10 > 100 || 10 > 20#SEMI#     // yanlÄ±ÅŸ\`\`\`
MantÄ±ksal VEYA operatÃ¶rÃ¼ \`||\` iki deÄŸeri kontrol eder ve bir boolean deÄŸeri dÃ¶ndÃ¼rÃ¼r.  DeÄŸerlerden biri veya her ikisi doÄŸruysa, **\`true\`** dÃ¶ndÃ¼rÃ¼r.  Her iki deÄŸer de yanlÄ±ÅŸsa, **\`false\`** dÃ¶ndÃ¼rÃ¼r.}{image:https://media.discordapp.net/attachments/882536981211529216/951357916605194280/IMG_20220308_234925.jpg}}]
`
}, {
	name: "js2-8",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #8 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Logical Operator \`&&\`**:
\`\`\`js
true && true        // true
1 > 2 && 2 > 1      // false
true && false       // false
4 === 4 && 3 > 1    // true\`\`\`
The logical AND operator **\`&&\`** checks two values and returns a boolean. If both values are truthy, then it returns **\`true\`**. If one, or both, of the values is falsy, then it returns **\`false\`**.}

{field:$customEmoji[tr_git] **TRï¸±MantÄ±ksal OperatÃ¶r \`&&\`**:
\`\`\`js
true && true        // doÄŸru
1 > 2 && 2 > 1      // doÄŸru
true && false       // doÄŸru
4 === 4 && 3 > 1    // doÄŸru\`\`\`
MantÄ±ksal VE operatÃ¶rÃ¼ **\`&&\`** iki deÄŸeri kontrol eder ve bir boolean deÄŸeri dÃ¶ndÃ¼rÃ¼r. Her iki deÄŸer de doÄŸruysa, **\`true\`** deÄŸerini dÃ¶ndÃ¼rÃ¼r. DeÄŸerlerden biri veya her ikisi de yanlÄ±ÅŸsa, **\`false\`** dÃ¶ndÃ¼rÃ¼r.}}]
`
}, {
	name: "js2-9",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #9 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Logical Operator \`!\`**:
\`\`\`js
let lateToWork = true#SEMI#
let oppositeValue = !lateToWork#SEMI#
console.log(oppositeValue)#SEMI#
// Prints: false\`\`\`
The logical NOT operator **\`!\`** can be used to do one of the following#COLON#
>>> $customEmoji[circle_git] Invert a Boolean value.

$customEmoji[circle_git] Invert the truthiness of non-Boolean values.}

{field:$customEmoji[tr_git] **TRï¸±MantÄ±ksal OperatÃ¶r \`!\`**:
\`\`\`js
let iseGecKaldi = true#SEMI#
let karsitDeger = !iseGecKaldi#SEMI#
console.log(karsitDeger)#SEMI#
// YazÄ±lan: false\`\`\`
MantÄ±ksal TERSÄ°NE operatÃ¶rÃ¼ **\`!\`** aÅŸaÄŸÄ±dakilerden birini yapmak iÃ§in kullanÄ±labilir#COLON#
>>> $customEmoji[circle_git] Bir Boolean deÄŸerini ters Ã§evirmek iÃ§in.

$customEmoji[circle_git] Boolean olmayan deÄŸerlerin doÄŸruluÄŸunu tersine Ã§evirmek iÃ§in.}}]
`
}, {
	name: "js2-10",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #10 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Ternary Operator**:
\`\`\`js
let price = 10.5#SEMI#
let day = "Monday"#SEMI#
day === "Monday" ? price -= 1.5 : price += 1.5#SEMI#\`\`\`
The ternary operator allows for a compact syntax in the case of binary (choosing between two choices) decisions. It accepts a condition followed by a **\`?\`** operator, and then two expressions separated by a **\`#COLON#\`**. If the condition evaluates to truthy, the first expression is executed, otherwise, the second expression is executed.}

{field:$customEmoji[tr_git] **TRï¸±ÃœÃ§lÃ¼ operatÃ¶r**:
\`\`\`js
let fiyat = 10.5#SEMI#
let gun = "Pazartesi"#SEMI#
gun === "Pazartesi" ?  fiyat -= 1.5 : fiyat += 1.5#SEMI#\`\`\`
ÃœÃ§lÃ¼ operatÃ¶r, ikili (iki seÃ§enek arasÄ±nda seÃ§im yapma) kararlarÄ± durumunda kompakt bir sÃ¶zdizimine izin verir.  **\`?\`** operatÃ¶rÃ¼nÃ¼n takip ettiÄŸi bir koÅŸulu ve ardÄ±ndan bir **\`#COLON#\`** ile ayrÄ±lmÄ±ÅŸ iki ifadeyi kabul eder. KoÅŸul doÄŸru olarak deÄŸerlendirilirse, ilk ifade yÃ¼rÃ¼tÃ¼lÃ¼r, aksi takdirde ikinci ifade yÃ¼rÃ¼tÃ¼lÃ¼r.}}]
`
}, {
	name: "js2-11",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #11 ğ– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Truthy and Falsy**:
>>> In JavaScript, values evaluate to **\`true\`** or **\`false\`** when evaluated as Booleans.

$customEmoji[circle_git] Values that evaluate to **\`true\`** are known as truthy

$customEmoji[circle_git] Values that evaluate to **\`false\`** are known as falsy

Falsy values include **\`false\`**, **\`0\`**, empty strings, **\`null\`**, **\`undefined\`**, and **\`NaN\`**. All other values are truthy.}

{field:$customEmoji[tr_git] **TRï¸±DoÄŸru ve YanlÄ±ÅŸ**:
>>> JavaScript'te deÄŸerler, Boolean olarak deÄŸerlendirildiÄŸinde **\`true\`** veya **\`false\`** olarak deÄŸerlendirilir.

$customEmoji[circle_git] **\`true\`** olarak deÄŸerlendirilen deÄŸerler doÄŸru olarak bilinir

$customEmoji[circle_git] **\`false\`** olarak deÄŸerlendirilen deÄŸerler sahte  olarak bilinir

Sahte deÄŸerler **\`false\`**, **\`0\`**, boÅŸ dizeler, **\`null\`**, **\`undefined\`** ve **\`NaN\`** iken, diÄŸer tÃ¼m deÄŸerler gerÃ§eÄŸe uygundur.}}]
`
}]