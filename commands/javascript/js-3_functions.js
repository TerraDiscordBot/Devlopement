module.exports =[{
	name: "js3-1",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Functions #1 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{title:$customEmoji[en_git] **ENï¸±Arrow Functions (ES6)**}
{description:\`\`\`js
// Arrow function with two arguments
const sum = (firstParam, secondParam) => {
	return firstParam + secondParam#SEMI#
#LEFT_BRACKET##SEMI# 
console.log(sum(2,5))#SEMI# // Prints: 7

// Arrow function with no arguments 
const printHello = () => { 
	console.log('hello')#SEMI#
#LEFT_BRACKET##SEMI#
printHello()#SEMI# // Prints: hello 

// Arrow functions with a single argument
const checkWeight = weight => { 
	console.log(\`Baggage weight #COLON# $\\{weight#LEFT_BRACKET# kilograms.\`)#SEMI#
#LEFT_BRACKET##SEMI#
checkWeight(25)#SEMI# // Prints: Baggage weight: 25 kilograms.

// Concise arrow functions
const multiply = (a, b) => a * b#SEMI#
console.log(multiply(2, 30))#SEMI# // Prints: 60\`\`\`
Arrow function expressions were introduced in ES6. These expressions are clean and concise. The syntax for an arrow function expression does not require the **\`function\`** keyword and uses a fat arrow **\`=>\`** to separate the parameter(s) from the body.

> There are several variations of arrow functions#COLON#
> 
> $customEmoji[circle_git] Arrow functions with a single parameter do not require **\`()\`** around the parameter list.
> 
> $customEmoji[circle_git] Arrow functions with a single expression can use the concise function body which returns the result of the expression without the **\`return\`** keyword.}}

{newEmbed:{footer:JavaScript Fonksiyonlar #1 ð– µ ï¹«$userTag[285118390031351809] tarafÄ±ndan yapÄ±ldÄ±}

{color:#F0DB4F}
{title: $customEmoji[tr_git] **TRï¸±Ok Ä°ÅŸlevleri (ES6)**}
{description:\`\`\`js
// Ä°ki baÄŸÄ±msÄ±z deÄŸiÅŸkenli ok iÅŸlevi
const toplamÄ± = (ilkParam, ikinciParam) => {
	return ilkParam + ikinciParam#SEMI#
#LEFT_BRACKET##SEMI#
console.log(sum(2,5))#SEMI# // YazÄ±lan: 7

// ArgÃ¼mansÄ±z ok iÅŸlevi
const merhabaYazdir = () => {
	console.log('merhaba')#SEMI#
#LEFT_BRACKET##SEMI#
merhabaYazdir()#SEMI# // BaskÄ±lar: merhaba

// Tek argÃ¼manlÄ± ok fonksiyonlarÄ±
const agirlikKontrolu = agÄ±rlÄ±k => {
	console.log(\`Bagaj aÄŸÄ±rlÄ±ÄŸÄ± #COLON# $\\{aÄŸÄ±rlÄ±k#LEFT_BRACKET# kilogram.\`)#SEMI#
#LEFT_BRACKET##SEMI#
agirlikKontrolu(25)#SEMI# // YazÄ±lan: Bagaj aÄŸÄ±rlÄ±ÄŸÄ±: 25 kilogram.

// KÄ±sa ok fonksiyonlarÄ±
const carpma = (a, b) => a * b#SEMI#
	console.log(carpma(2, 30))#SEMI# // YazÄ±lan: 60\`\`\`
Ok iÅŸlevi ifadeleri ES6'da tanÄ±tÄ±ldÄ±.  Bu ifadeler temiz ve Ã¶zlÃ¼dÃ¼r. Bir ok iÅŸlevi ifadesinin sÃ¶zdizimi **\`function\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼nÃ¼ gerektirmez ve parametreleri gÃ¶vdeden ayÄ±rmak iÃ§in kalÄ±n ok **\`=>\`** kullanÄ±r.

>>> Ok iÅŸlevlerinin Ã§eÅŸitli varyasyonlarÄ± vardÄ±r#COLON#

$customEmoji[circle_git] Tek parametreli ok iÅŸlevleri, parametre listesi Ã§evresinde **\`()\`** gerektirmez.

$customEmoji[circle_git] Tek bir ifadeye sahip ok iÅŸlevleri, **\`return\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼ olmadan ifadenin sonucunu dÃ¶ndÃ¼ren kÄ±sa iÅŸlev gÃ¶vdesini kullanabilir.
}}]`
}, {
	name: "js3-2",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #2 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Functions**:
\`\`\`js
// Defining the function: 
function sum(num1, num2) {
	return num1 + num2#SEMI#
#LEFT_BRACKET#

// Calling the function:
sum(3, 6)#SEMI# // 9\`\`\`
Functions are one of the fundamental building blocks in JavaScript. A \`function\` is a reusable set of statements to perform a task or calculate a value. Functions can be passed one or more values and can return a value at the end of their execution. In order to use a function, you must define it somewhere in the scope where you wish to call it.

The example code provided contains a function that takes in 2 values and returns the sum of those numbers.}

{field:$customEmoji[tr_git] **TRï¸±Fonksiyonlar**:
\`\`\`js
// Fonksiyonu tanÄ±mlama:
function toplami(sayi1, sayi2) {
	return sayi1 + sayi2#SEMI#
#LEFT_BRACKET#

// Fonksiyonu Ã§aÄŸÄ±rma: 
sum(3, 6)#SEMI# // 9\`\`\`
Ä°ÅŸlevler, JavaScript'teki temel yapÄ± taÅŸlarÄ±ndan biridir. Bir \`function\`, bir gÃ¶revi gerÃ§ekleÅŸtirmek veya bir deÄŸeri hesaplamak iÃ§in yeniden kullanÄ±labilir bir ifadeler kÃ¼mesidir. Fonksiyonlara bir veya daha fazla deÄŸer iletilebilir ve yÃ¼rÃ¼tmelerinin sonunda bir deÄŸer dÃ¶ndÃ¼rebilir. Bir iÅŸlevi kullanmak iÃ§in, onu kapsam iÃ§inde Ã§aÄŸÄ±rmak istediÄŸiniz bir yerde tanÄ±mlamanÄ±z gerekir.

SaÄŸlanan Ã¶rnek kod, 2 deÄŸer alan ve bu sayÄ±larÄ±n toplamÄ±nÄ± dÃ¶ndÃ¼ren bir iÅŸlev iÃ§erir.}}]
`
}, {
	name: "js3-3",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #3 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Anonymous Functions**:
\`\`\`js
// Named function
function rocketToMars() {
    return 'BOOM!'#SEMI#
#LEFT_BRACKET#
// Anonymous function
const rocketToMars = function() {
    return 'BOOM!'#SEMI#
#LEFT_BRACKET#\`\`\`
Anonymous functions in JavaScript do not have a name
property. They can be defined using the **\`function\`**
keyword, or as an arrow function. See the code example
for the difference between a named function and an
anonymous function.}

{field:$customEmoji[tr_git] **TRï¸±Ä°simsiz Fonksiyonlar**:
\`\`\`js
// AdlandÄ±rÄ±lmÄ±ÅŸ fonksiyon
function marsaRoket() {
    return 'BOOM!'#SEMI#
#LEFT_BRACKET#
// Anonim fonksiyon
const marsaRoket = function() {
    return 'BOOM!'#SEMI#
#LEFT_BRACKET#\`\`\`
JavaScript'teki anonim iÅŸlevlerin name Ã¶zelliÄŸi yoktur. **\`function\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼ kullanÄ±larak veya bir ok iÅŸlevi olarak tanÄ±mlanabilirler. AdlandÄ±rÄ±lmÄ±ÅŸ bir iÅŸlev ile anonim bir iÅŸlev arasÄ±ndaki fark iÃ§in kod Ã¶rneÄŸine bakÄ±n.}}]
`
}, {
	name: "js3-4",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #4 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Function Expressions**:
\`\`\`js
const dog = function() {
    return 'Woof!'#SEMI#
#LEFT_BRACKET#\`\`\`
Function expressions create functions inside an expression instead of as a function declaration. They can be anonymous and/or assigned to a variable.}

{field:$customEmoji[tr_git] **TRï¸±Fonksiyon Ä°fadeleri**:
\`\`\`js
const kopek = function() {
return 'Hav!'#SEMI#
#LEFT_BRACKET#\`\`\`
Fonksiyon ifadeleri, fonksiyon bildirimi yerine bir ifade iÃ§inde fonksiyonlar oluÅŸturur. Anonim olabilirler ve/veya bir deÄŸiÅŸkene atanabilirler.}}]
`
}, {
	name: "js3-5",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #5 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Function Parameters**:
\`\`\`js
// The parameter is name 
function sayHello(name) {
    return \`Hello, $\\{name!#LEFT_BRACKET#\`#SEMI#
#LEFT_BRACKET#\`\`\`
Inputs to functions are known as parameters when a function is declared or defined. Parameters are used as variables inside the function body. When the function is called, these parameters will have the value of whatever is passed in as arguments. It is possible to define a function without parameters.}

{field:$customEmoji[tr_git] **TRï¸±Fonksiyon Parametreleri**:
\`\`\`js
// Parametre isimdir
function merhabaDe(isim) {
    return \`Merhaba, $\\{isim!#LEFT_BRACKET#\`#SEMI#
#LEFT_BRACKET#\`\`\`
Fonksiyonlara giriÅŸler, bir fonksiyon bildirildiÄŸinde veya tanÄ±mlandÄ±ÄŸÄ±nda parametreler olarak bilinir. Parametreler, fonksiyon gÃ¶vdesi iÃ§inde deÄŸiÅŸkenler olarak kullanÄ±lÄ±r. Ä°ÅŸlev Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda, bu parametreler, argÃ¼man olarak iletilen her ÅŸeyin deÄŸerine sahip olacaktÄ±r. Parametresiz bir fonksiyon tanÄ±mlamak mÃ¼mkÃ¼ndÃ¼r.}}]
`
}, {
	name: "js3-6",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #6 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±\`return\` Keyword**:
\`\`\`js
// With return 
function sum(num1, num2) {
    return num1 + num2#SEMI#
#LEFT_BRACKET#

// Without return, so the function doesn't output the sum 
function sum(numi, num2) {
    num1 + num2#SEMI#
#LEFT_BRACKET#\`\`\`
Functions return (pass back) values using the **\`return\`** keyword. **\`return\`**  ends function execution and returns the specified value to the location where it was called. A common mistake is to forget the **\`return\`**  keyword, in which case the function will return **\`undefined\`**  by default.}

{field:$customEmoji[tr_git] **TRï¸±\`return\` Anahtar Kelime**:
\`\`\`js
// return ile
function sum(sayi, sayi2) {
    return sayi1 + sayi2#SEMI#
#LEFT_BRACKET#

// return olmadÄ±ÄŸÄ± iÃ§in fonksiyon toplamÄ± vermez
fonksiyon sum(sayi, sayi2) {
    sayi1 + sayi2#SEMI#
#LEFT_BRACKET#\`\`\`
Ä°ÅŸlevler, **\`return\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼nÃ¼ kullanarak deÄŸerleri dÃ¶ndÃ¼rÃ¼r (geri verir). **\`return\`** iÅŸlevin yÃ¼rÃ¼tÃ¼lmesini sonlandÄ±rÄ±r ve belirtilen deÄŸeri Ã§aÄŸrÄ±ldÄ±ÄŸÄ± konuma dÃ¶ndÃ¼rÃ¼r. YaygÄ±n bir hata, **\`return\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼nÃ¼ unutmaktÄ±r, bu durumda iÅŸlev varsayÄ±lan olarak **\`undefined\`** deÄŸerini dÃ¶ndÃ¼rÃ¼r.}}]
`
}, {
	name: "js3-7",
	code: `
	$sendMessage[{newEmbed:
	
{footer:JavaScript Conditionals #7 ð– µ Made byï¹«$userTag[285118390031351809]}

{color:#F0DB4F}

{field:$customEmoji[en_git] **ENï¸±Function Declaration**:
\`\`\`js
function add(num1, num2) {
    return num1 + num2#SEMI#
#LEFT_BRACKET#\`\`\`
    
>>> Function declarations are used to create named functions. These functions can be called using their declared name, Function declarations are built from #COLON#
$customEmoji[circle_git] The **\`function\`** keyword.
$customEmoji[circle_git] The function name.
An optional list of parameters separated by commas enclosed by a set of parentheses **\`()\`**.
A function body enclosed in a set of curly braces **\`{#LEFT_BRACKET#\`**.}

{field:$customEmoji[tr_git] **TRï¸±Fonksiyon Bildirimi**:
\`\`\`js
function add(sayi, sayi2) {
    sayi1 + sayi2#SEMI#
#LEFT_BRACKET#\`\`\`
    
>>> Fonksiyon bildirimleri, adlandÄ±rÄ±lmÄ±ÅŸ fonksiyonlar oluÅŸturmak iÃ§in kullanÄ±lÄ±r. Bu fonksiyonlar, belirtilen adlarÄ± kullanÄ±larak Ã§aÄŸrÄ±labilir, fonksiyon bildirimleri ÅŸunlardan oluÅŸturulur#COLON#
$customEmoji[circle_git] **\`function\`** anahtar sÃ¶zcÃ¼ÄŸÃ¼.
$customEmoji[circle_git] fonksiyon adÄ±.
Bir dizi parantez **\`()\`** iÃ§ine alÄ±nmÄ±ÅŸ, virgÃ¼lle ayrÄ±lmÄ±ÅŸ isteÄŸe baÄŸlÄ± bir parametre listesi.
Bir kÃ¼me parantez **\`{#LEFT_BRACKET#\`** iÃ§ine alÄ±nmÄ±ÅŸ bir iÅŸlev gÃ¶vdesi.}}]
`
}]
